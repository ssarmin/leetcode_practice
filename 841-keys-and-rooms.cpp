//https://leetcode.com/problems/keys-and-rooms
class Solution {
public:
    void bfs(vector<vector<int>>& rooms, unordered_set<int> &visit, int i){
        queue<int> q;
        q.push(i);
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto n: rooms[node]){
                if(!visit.count(n)){
                    visit.insert(n);
                    q.push(n);
                }
            }
        }
    }
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        unordered_set<int> visit;
        visit.insert(0);
        for(int i=0; i<rooms.size(); i++){
            if(visit.count(i)){
                bfs(rooms, visit, i);
            }
        }

        return visit.size() == rooms.size()? true: false;
    }
};

// [[1],[2],[3],[]]
// [[1,3],[3,0,1],[2],[0]]
// [[2],[],[1]]
// [[1,3], [1,4], [2, 3, 4, 1], [], [4, 3, 2]]
// [[1], [],[0,3],[1]]
// [[],[1,15,18],[16],[2,3,9,11,17,5],[15,19,8,12,14],[10,1,6],[12,9,11],[],[7],[13],[3],[16,2],[4],[18,13],[7,17],[6],[14,4],[5],[8,19],[10]]
// [[1],[],[0,3],[1]]
// [[1,3],[1,4],[2,3,4,1],[],[4,3,2]]
// [[4],[3],[],[2,5,7],[1],[],[8,9],[],[],[6]]
// [[1,3],[3,0,1],[2],[0]]
// [[2],[],[0]]
// [[2,4],[],[0],[3],[4,3]]
// [[],[1,15,18],[16],[2,3,9,11,17,5],[15,19,8,12,14],[10,1,6],[12,9,11],[],[7],[13],[3],[16,2],[4],[18,13],[7,17],[6],[14,4],[5],[8,19],[10]]
// [[1],[],[0,3],[1]]
// [[1,3],[1,4],[2,3,4,1],[],[4,3,2]]
// [[4], [3], [], [2,5,7], [1], [], [8,9], [], [], [6]]
// [[1], [], [0, 3], [1]]
// [[6,7,8],[5,4,9],[],[8],[4],[],[1,9,2,3],[7],[6,5],[2,3,1]]
