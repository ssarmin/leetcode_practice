//https://leetcode.com/problems/game-of-life
class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};
        int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};
        for(int r=0; r<board.size(); r++){
            for(int c=0; c<board[0].size(); c++){
                int live = 0;
                int dead = 0;
                for(int i=0; i<8; i++){
                    int x = r + dx[i];
                    int y = c + dy[i];

                    if(x >= 0 && y >= 0 && x < board.size() && y < board[0].size()){
                        if(board[x][y] == 0 || board[x][y] == 5){
                            dead++;
                        }else{
                            live++;
                        }
                    }
                }

                if(board[r][c] == 1){//live
                    if(live < 2){
                        board[r][c] = -5;
                    }else if(live > 3){
                        board[r][c] = -5;
                    }
                }else{//dead
                    if(live == 3){
                        board[r][c] = 5;
                    }
                }
            }
        }
        
        for(int r=0; r<board.size(); r++){
            for(int c=0; c<board[0].size(); c++){
                if(board[r][c] == 5){
                    board[r][c] = 1;
                }else if(board[r][c] == -5){
                    board[r][c] = 0;
                }
            }
        }
    }
};

// 8 neighbors for any position (x,y) are (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)
// To do an in-place simultaneous update, we have two steps (current and next).
// Current one values are 0 or 1.
// New values are 0 or 1.
// We will get 4 combinations 00, 01, 10, 11
// 00 refers to the current value being 0, and the next value will also be 0.
// 01 refers to the current value being 0, and the next value will be 1.
// 10 refers to the current value being 1, and the next value will be 0.
// 11 refers to the current value being 1, and the next value will also be 1.


// In my code, I am marking 00 as 0 and 11 as 1
// 01 as 5 and 10 as -5


// [[1]]
// [[0]]
// [[1]]
// [[1],[1]]
// [[1],[1],[1]]
// [[0,0,0],[1,1,1],[0,0,0]]
// [[1,0,1],[0,1,0],[1,0,1]]
// [[0,0,0],[0,0,0],[0,0,0]]
// [[0,0,0],[0,1,0],[0,0,0]]
// [[1,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]]
// [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]]
// [[0,0,0,1],[0,1,1,0],[0,1,1,0],[0,0,0,0]]
// [[0,0,0,0],[1,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]]
// [[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]]
// [[0,0,0,0],[0,0,1,0],[0,1,1,0],[0,0,0,0]]
// [[0,0,0,0],[0,1,0,0],[0,1,1,0],[0,0,0,0]]
// [[0,0,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0]]
// [[0,0,0,0],[0,1,1,0],[0,1,0,0],[0,0,0,0]]
// [[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0],[0,0,0,0],[0,0,1,0],[0,1,1,0],[0,0,0,0],[0,0,0,0],[0,1,0,0],[0,1,1,0],[0,0,0,0],[0,0,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0],[0,0,0,0],[0,1,1,0],[0,1,0,0],[0,0,0,0]]
// [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
// [[1,0,0,1,0,0,1,0,0,1]]
// [[1],[0],[0],[1],[0],[0],[1],[0],[0],[1]]
// [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
// [[0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
// [[0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0]]
// [[1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0],[0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0]]
// [[1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1],[1,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1],[1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,1,0,1],[1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],[1,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1],[1,1,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1],[1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,0,0,0,0]]
